---
/* Componentes */
import Input from '../Input.astro';
import { BotonesAuth } from './BotonesAuth.jsx';
import { CloseIcon } from '../../icons/CloseIcon';

import { accionesAuth, idsBtnAuth } from './constants/idsBtnAuth';

const { className } = Astro.props;
---

<div
  transition:animate="fade"
  id="modalFormulario"
  class="fixed z-50 top-0 bottom-0 left-0 right-0
    flex items-center justify-center
    bg-black bg-opacity-70 opacity-0 pointer-events-none transition-all overflow-y-auto"
>
  <div
    class="flex flex-col relative bg-green-950
    p-10 shadow-2xl rounded-2xl gap-5
    w-[90%]
    max-w-[500px]
   overflow-hidden"
  >
    <!-- Formulario modal -->
    <form id="formularioIniciarSesion" class="flex gap-5 items-end flex-wrap">
      <span id="cerrarModal" class="cursor-pointer">
        <CloseIcon
          className="stroke-white hover:scale-95 transition hover:shadow-lg"
          client:only
        />
      </span>
      <h2 class="text-2xl md:text-5xl font-bold text-center mx-auto">
        Iniciar sesión
      </h2>
      <!-- EMAIL -->
      <label for="email" class="flex flex-col w-full">
        <span>Correo electronico</span>
        <Input
          name="correo"
          class="p-2 outline-none rounded-lg text-black"
          type="email"
          placeholder="ejemplo@gmail.com"
        />
        <span
          id="errorCorreo"
          class="text-rose-400 font-bold text-right hidden errorInput"
          >Correo invalido</span
        >
      </label>
      <!-- CONTRASEÑA -->
      <label for="contraseña" class="flex flex-col w-full">
        <span>Contraseña:</span>
        <Input
          id="contraseña"
          name="contraseña"
          type="password"
          placeholder="******"
        />
        <span
          id="errorContra"
          class="text-rose-400 font-bold text-right hidden errorInput"
          >La contraseña debe tener al menos 6 caracteres</span
        >
      </label>
      <div class="flex flex-col gap-5 w-full justify-between">
        <button
          id="btnIniciar"
          type="submit"
          class="bg-sky-700 shadow-lg font-bold w-full rounded-lg p-3"
          >Ingresar</button
        >
      </div>
    </form>

    <BotonesAuth
      client:only
      action={accionesAuth.inicio}
      idBtnGoogle={idsBtnAuth.idBtnGoogleInicio}
      idBtnFacebook={idsBtnAuth.idBtnFacebookInicio}
      urlFetch="/api/auth/iniciarSesion"
    />

    <span
      class="absolute inset-x-0 bottom-0 h-2 bg-gradient-to-r from-green-300 via-blue-500 to-purple-600"
    ></span>
  </div>
</div>

<script>
  import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';
  import { app } from '../../firebase/client';
  import { obtenerMensajeDeError } from '../../constants/firebase/errores';
  import { BASE_URL_API, NOMBRE_APP } from '../../config';

  const auth = getAuth(app);

  /* <--------Manipulación del modal------> */
  const btnAbrirModal = document.querySelector('#btnAbrirModal');
  const modal = document.querySelector('#modalFormulario');
  const btnCerrarModal = document.querySelector('#cerrarModal');

  btnAbrirModal.addEventListener('click', (e) => {
    modal.classList.remove('opacity-0');
    modal.classList.remove('pointer-events-none');
    document.body.style.overflow = 'hidden';
  });

  btnCerrarModal.addEventListener('click', () => {
    modal.classList.add('opacity-0');
    modal.classList.add('pointer-events-none');
    document.body.style.overflow = 'unset';
  });

  /* <--------Manejo del inicio de sesión------> */
  const form = document.querySelector(
    '#formularioIniciarSesion',
  ) as HTMLFormElement;
  const btnIniciar = document.querySelector('#btnIniciar');

  form.addEventListener('submit', async (e) => {
    e.preventDefault();

    const infoFormulario = new FormData(form);
    const contraseña = infoFormulario.get('contraseña').toString();
    const correo = infoFormulario.get('correo').toString();
    /* Validación */
    if (!/^[\w-]+(\.[\w-]+)*@([\w-]+\.)+[a-zA-Z]{2,7}$/.test(correo)) {
      document.querySelector('#errorCorreo').classList.remove('hidden');
      return;
    }
    if (contraseña.length < 5) {
      document.querySelector('#errorContra').classList.remove('hidden');
      return;
    }
    btnIniciar.textContent = 'cargando...';
    btnIniciar.classList.add('opacity-50');
    btnIniciar.setAttribute('disabled', 'true');

    iniciarSesion(correo, contraseña);

    form.reset();
  });

  /* <----------Valida al usuario y envia que crea la cookie de la sesión-----< */
  async function iniciarSesion(correo: string, contra: string) {
    try {
      /* Autentica al usuario */
      const userCredential = await signInWithEmailAndPassword(
        auth,
        correo,
        contra,
      );
      const idToken = await userCredential.user.getIdToken();

      /* Petición para guardar al usuario en sesión */
      const response = await fetch(`/api/auth/iniciarSesion`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${idToken}`,
        },
        body: JSON.stringify({
          uid: userCredential.user.uid,
        }),
      });

      const { resDb } = await response.json();

      if (response.status === 200) {
        const userData = {
          uid: userCredential.user.uid,
          displayName: userCredential.user.displayName,
          email: userCredential.user.email,
          photoUrl: userCredential.user.photoURL,
          _id: resDb._id,
        };
        // alert(JSON.stringify(userData));
        localStorage.setItem(
          `${NOMBRE_APP}-userData`,
          JSON.stringify(userData),
        );

        window.location.assign('/feed');
      }
    } catch (error) {
      alert(JSON.stringify(error));
      const mensaje = obtenerMensajeDeError(error.code);
      alert(mensaje);
    }
    btnIniciar.textContent = 'ingresar';
    btnIniciar.classList.remove('opacity-50');
    btnIniciar.removeAttribute('disabled');
  }

  /* Reinicia los errores */
  form.querySelectorAll('input').forEach((input) => {
    input.addEventListener('input', (e) => {
      document
        .querySelectorAll('.errorInput')
        .forEach((error) => error.classList.add('hidden'));
    });
  });
</script>
